name: Production Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0
  workflow_dispatch:  # Allow manual trigger

permissions:
  contents: write  # Required for creating releases
  actions: read
  checks: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.32.6'
        channel: 'stable'
        
    - name: Setup Node.js for Firebase
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install Firebase CLI
      run: npm install -g firebase-tools
        
    - name: Install dependencies
      run: flutter pub get
      
    - name: Setup production google-services.json
      run: |
        echo "${{ secrets.GOOGLE_SERVICES_PROD }}" | base64 -d > android/app/google-services.json
        # Validate the decoded JSON
        python3 -m json.tool android/app/google-services.json > /dev/null
        echo "‚úÖ Production google-services.json is valid"
        echo "Package name should be: com.samaanai.productivityhealth.prod"
        grep -o '"package_name"[[:space:]]*:[[:space:]]*"[^"]*"' android/app/google-services.json
        
    - name: Setup production keystore
      run: |
        echo "üîß Setting up production keystore (separate from staging)"
        
        # Create .android directory and decode the production keystore
        mkdir -p /home/runner/.config/.android/
        echo "${{ secrets.PRODUCTION_KEYSTORE }}" | base64 -d > android/app/production-keystore.jks
        
        # Verify the keystore exists and get SHA-1
        echo "üîç Verifying production keystore SHA-1..."
        KEYSTORE_SHA1=$(keytool -list -v -keystore android/app/production-keystore.jks -alias production -storepass "${{ secrets.PRODUCTION_KEYSTORE_PASSWORD }}" -keypass "${{ secrets.PRODUCTION_KEY_PASSWORD }}" | grep "SHA1:" | sed 's/.*SHA1: //' | tr -d ' ')
        echo "üîë Production keystore SHA-1: $KEYSTORE_SHA1"
        
        # The SHA-1 should be different from staging to avoid conflicts
        KEYSTORE_SHA1_CLEAN=$(echo "$KEYSTORE_SHA1" | tr -d ':' | tr '[:upper:]' '[:lower:]')
        echo "üîç Production SHA-1 (clean): $KEYSTORE_SHA1_CLEAN"
        echo "üìã This SHA-1 should be registered in Firebase for package: com.samaanai.productivityhealth.prod"
        
        # Warning about staging conflict
        STAGING_SHA1="53315440bd500648d1034bdf6fa462fce03775fa"
        if [ "$KEYSTORE_SHA1_CLEAN" = "$STAGING_SHA1" ]; then
          echo "‚ùå WARNING: Production SHA-1 matches staging SHA-1!"
          echo "   This will cause Firebase OAuth conflicts."
          echo "   Production should use a different keystore."
          exit 1
        else
          echo "‚úÖ SUCCESS: Production SHA-1 is different from staging (no conflict)"
        fi
        
    - name: Run tests
      run: flutter test
        
    - name: Configure Firebase Options for Production
      run: |
        sed -i "s/apiKey: '.*'/apiKey: '${{ secrets.FIREBASE_API_KEY_PRODUCTION }}'/g" lib/firebase_options.dart
        sed -i "s/appId: '1:[0-9]*:web:[a-zA-Z0-9]*'/appId: '${{ secrets.FIREBASE_APP_ID_WEB_PRODUCTION }}'/g" lib/firebase_options.dart
        sed -i "s/appId: 'YOUR_ANDROID_APP_ID_HERE'/appId: '${{ secrets.FIREBASE_APP_ID_ANDROID_PRODUCTION }}'/g" lib/firebase_options.dart
        sed -i "s/appId: 'YOUR_IOS_APP_ID_HERE'/appId: '${{ secrets.FIREBASE_APP_ID_IOS_PRODUCTION }}'/g" lib/firebase_options.dart
        echo "‚úÖ Replaced placeholders in firebase_options.dart with production secrets"
        
    - name: Replace Firebase configuration in web template
      run: |
        sed -i 's/{{GOOGLE_CLIENT_ID}}/${{ secrets.GOOGLE_CLIENT_ID_PRODUCTION }}/g' web/index.html
        sed -i 's/{{FIREBASE_API_KEY}}/${{ secrets.FIREBASE_API_KEY_PRODUCTION }}/g' web/index.html
        sed -i 's/{{FIREBASE_PROJECT_ID}}/${{ secrets.FIREBASE_PROJECT_ID_PRODUCTION }}/g' web/index.html
        sed -i 's/{{FIREBASE_AUTH_DOMAIN}}/${{ secrets.FIREBASE_AUTH_DOMAIN_PRODUCTION }}/g' web/index.html
        sed -i 's/{{FIREBASE_STORAGE_BUCKET}}/${{ secrets.FIREBASE_STORAGE_BUCKET_PRODUCTION }}/g' web/index.html
        sed -i 's/{{FIREBASE_MESSAGING_SENDER_ID}}/${{ secrets.FIREBASE_MESSAGING_SENDER_ID_PRODUCTION }}/g' web/index.html
        sed -i 's/{{FIREBASE_APP_ID}}/${{ secrets.FIREBASE_APP_ID_PRODUCTION }}/g' web/index.html
        sed -i 's/{{FIREBASE_MEASUREMENT_ID}}/${{ secrets.FIREBASE_MEASUREMENT_ID_PRODUCTION }}/g' web/index.html
        echo "‚úÖ Replaced all Firebase configuration placeholders in web/index.html"
        
    - name: Build Flutter Web (Production)
      run: |
        flutter build web --release \
          --dart-define=ENVIRONMENT=production
      
    - name: Setup Firebase Service Account
      run: |
        echo "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON }}" | base64 -d > $HOME/gcloud-service-key.json
        export GOOGLE_APPLICATION_CREDENTIALS=$HOME/gcloud-service-key.json
        gcloud auth activate-service-account --key-file=$HOME/gcloud-service-key.json
        echo "GOOGLE_APPLICATION_CREDENTIALS=$HOME/gcloud-service-key.json" >> $GITHUB_ENV
        
    - name: Deploy to Firebase (Production)
      run: |
        firebase use samaan-ai-production-2025
        firebase deploy --only hosting
        echo "‚úÖ Production web deployed"
        
    - name: Build Production APK (debug mode for OAuth compatibility)
      run: flutter build apk --debug --flavor production --dart-define=ENVIRONMENT=production
      
    - name: Build Production App Bundle (debug mode for OAuth compatibility)  
      run: flutter build appbundle --debug --flavor production --dart-define=ENVIRONMENT=production
      
    - name: Upload Production Web artifact
      uses: actions/upload-artifact@v4
      with:
        name: production-web-build
        path: build/web/
        
    - name: Upload Production APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: production-debug-apk
        path: build/app/outputs/flutter-apk/app-production-debug.apk
        
    - name: Upload Production AAB artifact
      uses: actions/upload-artifact@v4
      with:
        name: production-debug-aab
        path: build/app/outputs/bundle/productionDebug/app-production-debug.aab
        
    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          build/app/outputs/flutter-apk/app-production-debug.apk
          build/app/outputs/bundle/productionDebug/app-production-debug.aab
        body: |
          üöÄ **Production Release ${{ github.ref_name }}**
          
          üì± **Android APK**: Download from assets below
          üì¶ **Android AAB**: For Play Store deployment
          üåê **Web**: Deployed to https://samaan-ai-production-2025.web.app
          
          This release includes both web and Android builds.
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}