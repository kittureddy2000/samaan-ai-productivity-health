name: Pre-Production Deploy (Staging)

on:
  push:
    branches:
      - main  # Trigger on push to main branch
    paths-ignore:
      - 'README.md'
      - 'docs/**' 
      - '**.md'
  workflow_dispatch:  # Allow manual trigger

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.32.6'
        channel: 'stable'
        
    - name: Setup Node.js for Firebase
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install Firebase CLI
      run: npm install -g firebase-tools
        
    - name: Install dependencies
      run: flutter pub get
      
    - name: Format check
      run: |
        dart format --output=none --set-exit-if-changed .
        
    - name: Analyze (non-fatal infos/warnings)
      run: |
        flutter analyze --no-pub --no-fatal-infos --no-fatal-warnings
      
    - name: Setup staging google-services.json
      run: |
        echo "${{ secrets.GOOGLE_SERVICES_STAGING }}" | base64 -d > android/app/google-services.json
        # Validate the decoded JSON
        python3 -m json.tool android/app/google-services.json > /dev/null
        echo "‚úÖ Staging google-services.json is valid"
        echo "Package name should be: com.samaanai.productivityhealth"
        grep -o '"package_name"[[:space:]]*:[[:space:]]*"[^"]*"' android/app/google-services.json
        
    - name: Run tests
      run: flutter test
      
    - name: Configure Firebase Options for Staging
      run: |
        echo "üîß Configuring Firebase Options for staging environment..."
        
        # Backup original firebase_options.dart
        cp lib/firebase_options.dart lib/firebase_options.dart.backup
        
        # Set web values from secrets
        echo "üì± Setting web Firebase configuration from secrets..."
        sed -i "s/apiKey: '.*'/apiKey: '${{ secrets.FIREBASE_API_KEY_STAGING }}'/g" lib/firebase_options.dart
        sed -i "s/appId: '1:[0-9]*:web:[a-zA-Z0-9]*'/appId: '${{ secrets.FIREBASE_APP_ID_WEB_STAGING }}'/g" lib/firebase_options.dart
        
        # Derive Android values from the decoded google-services.json to ensure perfect match
        echo "üì± Extracting Android Firebase configuration from google-services.json..."
        ANDROID_APP_ID=$(python3 -c "import json,sys; j=json.load(open('android/app/google-services.json')); print(j['client'][0]['client_info']['mobilesdk_app_id'])")
        ANDROID_API_KEY=$(python3 -c "import json,sys; j=json.load(open('android/app/google-services.json')); print(j['client'][0]['api_key'][0]['current_key'])")
        STORAGE_BUCKET=$(python3 -c "import json,sys; j=json.load(open('android/app/google-services.json')); print(j['project_info']['storage_bucket'])")
        
        echo "Using Android APP_ID=$ANDROID_APP_ID"
        echo "Using Android API_KEY=${ANDROID_API_KEY:0:10}********"
        echo "Using Android STORAGE_BUCKET=$STORAGE_BUCKET"
        
        # Also extract project id for completeness
        PROJECT_ID=$(python3 -c "import json,sys; j=json.load(open('android/app/google-services.json')); print(j['project_info']['project_id'])")

        # Update android block in lib/firebase_options.dart directly to match google-services.json
        echo "üõ† Updating android FirebaseOptions in lib/firebase_options.dart"
        sed -i "/static const FirebaseOptions android/,/);/ s/appId: '.*'/appId: '$ANDROID_APP_ID'/" lib/firebase_options.dart
        sed -i "/static const FirebaseOptions android/,/);/ s/apiKey: '.*'/apiKey: '$ANDROID_API_KEY'/" lib/firebase_options.dart
        sed -i "/static const FirebaseOptions android/,/);/ s/projectId: '.*'/projectId: '$PROJECT_ID'/" lib/firebase_options.dart
        sed -i "/static const FirebaseOptions android/,/);/ s/storageBucket: '.*'/storageBucket: '$STORAGE_BUCKET'/" lib/firebase_options.dart

        echo "‚úÖ Android Firebase options updated to match google-services.json"
        
    - name: Validate Firebase Android Configuration
      run: |
        echo "üîç Validating Firebase Android configuration consistency..."
        
        # Extract values from google-services.json
        JSON_APP_ID=$(python3 -c "import json; j=json.load(open('android/app/google-services.json')); print(j['client'][0]['client_info']['mobilesdk_app_id'])")
        JSON_API_KEY=$(python3 -c "import json; j=json.load(open('android/app/google-services.json')); print(j['client'][0]['api_key'][0]['current_key'])")
        JSON_PROJECT_ID=$(python3 -c "import json; j=json.load(open('android/app/google-services.json')); print(j['project_info']['project_id'])")
        JSON_STORAGE_BUCKET=$(python3 -c "import json; j=json.load(open('android/app/google-services.json')); print(j['project_info']['storage_bucket'])")
        
        # Use external Python script to validate Firebase configuration consistency
        python3 scripts/validate-firebase-config.py
        
    - name: Replace Firebase configuration in web template
      run: |
        sed -i 's/{{GOOGLE_CLIENT_ID}}/${{ secrets.GOOGLE_CLIENT_ID_STAGING }}/g' web/index.html
        sed -i 's/{{FIREBASE_API_KEY}}/${{ secrets.FIREBASE_API_KEY_STAGING }}/g' web/index.html
        sed -i 's/{{FIREBASE_PROJECT_ID}}/${{ secrets.FIREBASE_PROJECT_ID_STAGING }}/g' web/index.html
        sed -i 's/{{FIREBASE_AUTH_DOMAIN}}/${{ secrets.FIREBASE_AUTH_DOMAIN_STAGING }}/g' web/index.html
        sed -i 's/{{FIREBASE_STORAGE_BUCKET}}/${{ secrets.FIREBASE_STORAGE_BUCKET_STAGING }}/g' web/index.html
        sed -i 's/{{FIREBASE_MESSAGING_SENDER_ID}}/${{ secrets.FIREBASE_MESSAGING_SENDER_ID_STAGING }}/g' web/index.html
        sed -i 's/{{FIREBASE_APP_ID}}/${{ secrets.FIREBASE_APP_ID_STAGING }}/g' web/index.html
        sed -i 's/{{FIREBASE_MEASUREMENT_ID}}/${{ secrets.FIREBASE_MEASUREMENT_ID_STAGING }}/g' web/index.html
        echo "‚úÖ Replaced all Firebase configuration placeholders in web/index.html"
        
    - name: Build Flutter Web (Staging)
      run: |
        flutter build web --release \
          --dart-define=ENVIRONMENT=staging
      
    - name: Setup Firebase Service Account
      run: |
        echo "üîê Setting up Firebase service account..."
        
        # Check if the staging-specific secret exists
        if [ -z "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_STAGING_JSON }}" ]; then
          echo "‚ùå FATAL: GOOGLE_APPLICATION_CREDENTIALS_STAGING_JSON secret is missing!"
          echo "Please add this secret to your GitHub repository settings."
          echo "It should contain the base64-encoded Firebase STAGING service account JSON."
          exit 1
        fi
        
        # Decode and save the service account key
        echo "üìù Decoding staging service account credentials..."
        echo "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_STAGING_JSON }}" | base64 -d > $HOME/gcloud-service-key.json
        
        # Verify the decoded file is valid JSON
        if ! python3 -m json.tool $HOME/gcloud-service-key.json > /dev/null 2>&1; then
          echo "‚ùå FATAL: Decoded service account key is not valid JSON!"
          echo "Please check that GOOGLE_APPLICATION_CREDENTIALS_JSON secret contains valid base64-encoded JSON."
          exit 1
        fi
        
        # Set up authentication
        export GOOGLE_APPLICATION_CREDENTIALS=$HOME/gcloud-service-key.json
        gcloud auth activate-service-account --key-file=$HOME/gcloud-service-key.json
        echo "GOOGLE_APPLICATION_CREDENTIALS=$HOME/gcloud-service-key.json" >> $GITHUB_ENV
        
        echo "‚úÖ Firebase service account setup complete"
        
    - name: Deploy to Firebase (Staging)
      run: |
        firebase use samaan-ai-staging-2025
        firebase deploy --only hosting
        
    - name: Setup Java for Android
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: Setup consistent debug keystore for staging
      run: |
        echo "üîß Setting up consistent debug keystore for staging"
        rm -f android/key.properties
        rm -f android/app/*.jks
        
        # Check if DEBUG_KEYSTORE secret exists
        if [ -z "${{ secrets.DEBUG_KEYSTORE }}" ]; then
          echo "‚ùå FATAL: DEBUG_KEYSTORE secret is missing!"
          exit 1
        fi
        
        # Create .android directory and decode our consistent debug keystore
        echo "üì• Creating .android directory at the location specified by the build logs..."
        mkdir -p /home/runner/.config/.android/
        echo "üì• Decoding DEBUG_KEYSTORE secret..."
        echo "${{ secrets.DEBUG_KEYSTORE }}" | base64 -d > /home/runner/.config/.android/debug.keystore
        
        # Verify the keystore exists and is valid
        if [ ! -f /home/runner/.config/.android/debug.keystore ]; then
          echo "‚ùå FATAL: Failed to create debug keystore!"
          exit 1
        fi
        
        # Verify the keystore and get SHA-1
        echo "üîç Verifying debug keystore SHA-1..."
        KEYSTORE_SHA1=$(keytool -list -v -keystore /home/runner/.config/.android/debug.keystore -alias androiddebugkey -storepass android -keypass android | grep "SHA1:" | sed 's/.*SHA1: //' | tr -d ' ')
        KEYSTORE_SHA1_CLEAN=$(echo "$KEYSTORE_SHA1" | tr -d ':' | tr '[:upper:]' '[:lower:]')
        echo "üîë Keystore SHA-1: $KEYSTORE_SHA1_CLEAN"
        
        # Compare google-services.json certificate_hash with computed SHA-1
        CERT=$(grep -o '"certificate_hash"[[:space:]]*:[[:space:]]*"[^"]*"' android/app/google-services.json | head -n1 | sed 's/.*:[[:space:]]*"//; s/"$//')
        CERT_L=$(echo "$CERT" | tr '[:upper:]' '[:lower:]')
        if [ "$CERT_L" = "$KEYSTORE_SHA1_CLEAN" ]; then
          echo "‚úÖ SUCCESS: google-services.json certificate_hash matches DEBUG_KEYSTORE"
        else
          echo "‚ùå FATAL: google-services.json certificate_hash does not match DEBUG_KEYSTORE"
          echo "   google-services.json: $CERT_L"
          echo "   DEBUG_KEYSTORE SHA-1: $KEYSTORE_SHA1_CLEAN"
          exit 1
        fi
        
    - name: Build Debug APK (Staging)
      run: flutter build apk --debug --flavor staging --dart-define=ENVIRONMENT=staging
      
    - name: Verify Gradle signingReport (debug) matches expected SHA-1
      run: |
        echo "üîç Verifying Gradle signingReport for debug variant..."
        cd android
        # Initialize Gradle wrapper
        ./gradlew tasks --all > /dev/null 2>&1 || true
        ./gradlew signingReport | sed -n '/Variant: debug/,$p' | sed -n '1,40p' | cat
        DEBUG_SHA1=$(./gradlew signingReport | awk '/Variant: debug/{f=1} f && /SHA1:/{print $2; exit}')
        cd -
        echo "üß™ Gradle debug SHA-1: $DEBUG_SHA1"
        # Normalize
        DEBUG_SHA1_CLEAN=$(echo "$DEBUG_SHA1" | tr -d ':' | tr '[:upper:]' '[:lower:]')
        EXPECTED_SHA1="7e221caa4a68c4c47179faea691934f1435e016c"
        if [ "$DEBUG_SHA1_CLEAN" = "$EXPECTED_SHA1" ]; then
          echo "‚úÖ Gradle debug signingReport SHA-1 matches expected"
        else
          echo "‚ùå Gradle signingReport SHA-1 does not match expected"
          echo "   Expected: $EXPECTED_SHA1"
          echo "   Got:      $DEBUG_SHA1_CLEAN"
          exit 1
        fi

    - name: Verify google-services.json certificate hash
      run: |
        echo "üîç Verifying certificate_hash in android/app/google-services.json"
        CERT=$(grep -o '"certificate_hash"[[:space:]]*:[[:space:]]*"[^"]*"' android/app/google-services.json | head -n1 | sed 's/.*:[[:space:]]*"//; s/"$//')
        echo "üìÑ certificate_hash in json: $CERT"
        EXPECTED="7e221caa4a68c4c47179faea691934f1435e016c"
        CERT_L=$(echo "$CERT" | tr '[:upper:]' '[:lower:]')
        if [ "$CERT_L" != "$EXPECTED" ]; then
          echo "‚ùå certificate_hash mismatch"
          echo "   Expected: $EXPECTED"
          echo "   Got     : $CERT_L"
          exit 1
        fi
        echo "‚úÖ google-services.json certificate_hash matches expected"
        
    - name: Upload Staging Web artifact
      uses: actions/upload-artifact@v4
      with:
        name: staging-web-build
        path: build/web/
        
    - name: Upload Staging APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: staging-debug-apk
        path: build/app/outputs/flutter-apk/app-staging-debug.apk