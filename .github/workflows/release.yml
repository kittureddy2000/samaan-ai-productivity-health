name: Production Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0, v1.0.1, etc.
  workflow_dispatch:  # Allow manual trigger for testing
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: false
        default: 'manual-release'

permissions:
  contents: write  # Required for creating releases
  actions: read
  checks: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Debug Production Build Environment
      run: |
        echo "üè≠ Starting Production Release Build"
        echo "üìã Trigger: ${{ github.event_name }}"
        echo "üè∑Ô∏è Ref: ${{ github.ref }}"
        echo "üìù SHA: ${{ github.sha }}"
        if [ "${{ github.event_name }}" == "push" ]; then
          echo "üéØ Tag-triggered build detected"
        else
          echo "üéØ Manual workflow dispatch detected"
        fi
      
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.32.6'
        channel: 'stable'
        
    - name: Setup Node.js for Firebase
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install Firebase CLI
      run: npm install -g firebase-tools
        
    - name: Install dependencies
      run: flutter pub get
      
    - name: Format check
      run: |
        dart format --output=none --set-exit-if-changed .
        
    - name: Analyze
      run: |
        flutter analyze --no-pub
      
    - name: Setup production google-services.json
      run: |
        echo "${{ secrets.GOOGLE_SERVICES_PROD }}" | base64 -d > android/app/google-services.json
        # Validate the decoded JSON
        python3 -m json.tool android/app/google-services.json > /dev/null
        echo "‚úÖ Production google-services.json is valid"
        echo "Package name should be: com.samaanai.productivityhealth.prod"
        grep -o '"package_name"[[:space:]]*:[[:space:]]*"[^"]*"' android/app/google-services.json
        
    - name: Setup production keystore
      run: |
        echo "üîß Setting up production keystore (separate from staging)"
        
        # Create .android directory and decode the production keystore
        mkdir -p /home/runner/.config/.android/
        echo "${{ secrets.ANDROID_RELEASE_KEYSTORE }}" | base64 -d > android/app/production-keystore.jks
        
        # Verify the keystore exists and get SHA-1
        echo "üîç Verifying production keystore SHA-1..."
        KEYSTORE_SHA1=$(keytool -list -v -keystore android/app/production-keystore.jks -alias production -storepass "${{ secrets.ANDROID_RELEASE_KEYSTORE_PASSWORD }}" -keypass "${{ secrets.ANDROID_RELEASE_KEY_PASSWORD }}" | grep "SHA1:" | sed 's/.*SHA1: //' | tr -d ' ')
        echo "üîë Production keystore SHA-1: $KEYSTORE_SHA1"
        
        # The SHA-1 should be different from staging to avoid conflicts
        KEYSTORE_SHA1_CLEAN=$(echo "$KEYSTORE_SHA1" | tr -d ':' | tr '[:upper:]' '[:lower:]')
        echo "üîç Production SHA-1 (clean): $KEYSTORE_SHA1_CLEAN"
        echo "üìã This SHA-1 should be registered in Firebase for package: com.samaanai.productivityhealth.prod"
        
        # Warning about staging conflict
        STAGING_SHA1="7e221caa4a68c4c47179faea691934f1435e016c"
        if [ "$KEYSTORE_SHA1_CLEAN" = "$STAGING_SHA1" ]; then
          echo "‚ùå WARNING: Production SHA-1 matches staging SHA-1!"
          echo "   This will cause Firebase OAuth conflicts."
          echo "   Production should use a different keystore."
          exit 1
        else
          echo "‚úÖ SUCCESS: Production SHA-1 is different from staging (no conflict)"
        fi
        
        # Write key.properties for Gradle signing
        cat > android/key.properties <<EOF
        storePassword=${{ secrets.ANDROID_RELEASE_KEYSTORE_PASSWORD }}
        keyPassword=${{ secrets.ANDROID_RELEASE_KEY_PASSWORD }}
        keyAlias=${{ secrets.ANDROID_RELEASE_KEY_ALIAS }}
        storeFile=production-keystore.jks
        EOF
        
    - name: Run tests
      run: flutter test
        
    - name: Configure Firebase Options for Production
      run: |
        sed -i "s/apiKey: '.*'/apiKey: '${{ secrets.FIREBASE_API_KEY_PRODUCTION }}'/g" lib/firebase_options.dart
        sed -i "s/appId: '1:[0-9]*:web:[a-zA-Z0-9]*'/appId: '${{ secrets.FIREBASE_APP_ID_WEB_PRODUCTION }}'/g" lib/firebase_options.dart
        sed -i "s/appId: 'YOUR_ANDROID_APP_ID_HERE'/appId: '${{ secrets.FIREBASE_APP_ID_ANDROID_PRODUCTION }}'/g" lib/firebase_options.dart
        echo "‚úÖ Replaced placeholders in firebase_options.dart with production secrets"
        
    - name: Replace Firebase configuration in web template
      run: |
        sed -i 's/{{GOOGLE_CLIENT_ID}}/${{ secrets.GOOGLE_CLIENT_ID_PRODUCTION }}/g' web/index.html
        sed -i 's/{{FIREBASE_API_KEY}}/${{ secrets.FIREBASE_API_KEY_PRODUCTION }}/g' web/index.html
        sed -i 's/{{FIREBASE_PROJECT_ID}}/${{ secrets.FIREBASE_PROJECT_ID_PRODUCTION }}/g' web/index.html
        sed -i 's/{{FIREBASE_AUTH_DOMAIN}}/${{ secrets.FIREBASE_AUTH_DOMAIN_PRODUCTION }}/g' web/index.html
        sed -i 's/{{FIREBASE_STORAGE_BUCKET}}/${{ secrets.FIREBASE_STORAGE_BUCKET_PRODUCTION }}/g' web/index.html
        sed -i 's/{{FIREBASE_MESSAGING_SENDER_ID}}/${{ secrets.FIREBASE_MESSAGING_SENDER_ID_PRODUCTION }}/g' web/index.html
        sed -i 's/{{FIREBASE_APP_ID}}/${{ secrets.FIREBASE_APP_ID_WEB_PRODUCTION }}/g' web/index.html
        sed -i 's/{{FIREBASE_MEASUREMENT_ID}}/${{ secrets.FIREBASE_MEASUREMENT_ID_PRODUCTION }}/g' web/index.html
        echo "‚úÖ Replaced all Firebase configuration placeholders in web/index.html"
        
    - name: Build Flutter Web (Production)
      run: |
        flutter build web --release \
          --dart-define=ENVIRONMENT=production
      
    - name: Setup Firebase Service Account
      run: |
        echo "üîê Setting up Firebase service account..."
        
        # Check if the production-specific secret exists
        if [ -z "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_PRODUCTION_JSON }}" ]; then
          echo "‚ùå FATAL: GOOGLE_APPLICATION_CREDENTIALS_PRODUCTION_JSON secret is missing!"
          echo "Please add this secret to your GitHub repository settings."
          echo "It should contain the base64-encoded Firebase PRODUCTION service account JSON."
          exit 1
        fi
        
        # Decode and save the service account key
        echo "üìù Decoding production service account credentials..."
        echo "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_PRODUCTION_JSON }}" | base64 -d > $HOME/gcloud-service-key.json
        
        # Verify the decoded file is valid JSON
        if ! python3 -m json.tool $HOME/gcloud-service-key.json > /dev/null 2>&1; then
          echo "‚ùå FATAL: Decoded service account key is not valid JSON!"
          echo "Please check that GOOGLE_APPLICATION_CREDENTIALS_PRODUCTION_JSON secret contains valid base64-encoded JSON."
          exit 1
        fi
        
        # Set up authentication
        export GOOGLE_APPLICATION_CREDENTIALS=$HOME/gcloud-service-key.json
        gcloud auth activate-service-account --key-file=$HOME/gcloud-service-key.json
        echo "GOOGLE_APPLICATION_CREDENTIALS=$HOME/gcloud-service-key.json" >> $GITHUB_ENV
        
        echo "‚úÖ Firebase service account setup complete"
        
    - name: Deploy to Firebase (Production)
      run: |
        firebase use samaan-ai-production-2025
        firebase deploy --only hosting
        echo "‚úÖ Production web deployed"
        
    - name: Build Production APK (release)
      run: flutter build apk --release --flavor production --dart-define=ENVIRONMENT=production
      
    - name: Build Production App Bundle (release)
      run: flutter build appbundle --release --flavor production --dart-define=ENVIRONMENT=production
      
    - name: Verify Gradle signing for productionRelease
      run: |
        echo "üîç Verifying Gradle signingReport for productionRelease variant..."
        cd android
        ./gradlew tasks --all > /dev/null 2>&1 || true
        ./gradlew signingReport | sed -n '/Variant: productionRelease/,$p' | sed -n '1,60p' | cat
        SHA1=$(./gradlew signingReport | awk '/Variant: productionRelease/{f=1} f && /SHA1:/{print $2; exit}')
        cd -
        echo "Signing SHA1 (masked): ${SHA1:0:8}********"
        if [ -z "$SHA1" ]; then
          echo "‚ùå Could not read SHA1 for productionRelease variant" && exit 1
        fi
        echo "‚úÖ Gradle signing report produced for productionRelease"

    - name: Verify release artifacts exist
      run: |
        APK=build/app/outputs/flutter-apk/app-production-release.apk
        AAB=build/app/outputs/bundle/productionRelease/app-production-release.aab
        [ -f "$APK" ] || (echo "‚ùå Missing APK: $APK" && exit 1)
        [ -f "$AAB" ] || (echo "‚ùå Missing AAB: $AAB" && exit 1)
        ls -lh "$APK" || true
        ls -lh "$AAB" || true
        echo "‚úÖ Release artifacts verified"
    
    - name: Generate SHA256 checksums
      run: |
        APK=build/app/outputs/flutter-apk/app-production-release.apk
        AAB=build/app/outputs/bundle/productionRelease/app-production-release.aab
        sha256sum "$APK" | tee "${APK}.sha256"
        sha256sum "$AAB" | tee "${AAB}.sha256"
        echo "APK SHA256:  $(cut -d' ' -f1 ${APK}.sha256)"
        echo "AAB SHA256:  $(cut -d' ' -f1 ${AAB}.sha256)"
      
    - name: Upload Production Web artifact
      uses: actions/upload-artifact@v4
      with:
        name: production-web-build
        path: build/web/
        
    - name: Upload Production APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: production-release-apk
        path: |
          build/app/outputs/flutter-apk/app-production-release.apk
          build/app/outputs/flutter-apk/app-production-release.apk.sha256
        
    - name: Upload Production AAB artifact
      uses: actions/upload-artifact@v4
      with:
        name: production-release-aab
        path: |
          build/app/outputs/bundle/productionRelease/app-production-release.aab
          build/app/outputs/bundle/productionRelease/app-production-release.aab.sha256
    
    - name: Prepare release notes with checksums
      id: notes
      run: |
        APK=build/app/outputs/flutter-apk/app-production-release.apk
        AAB=build/app/outputs/bundle/productionRelease/app-production-release.aab
        APK_SHA=$(cut -d' ' -f1 ${APK}.sha256)
        AAB_SHA=$(cut -d' ' -f1 ${AAB}.sha256)
        cat > RELEASE_NOTES.md << 'RELEASE_EOF'
üöÄ Production Release ${GITHUB_REF_NAME}

SHA256 checksums:
- APK: `${APK_SHA}`
- AAB: `${AAB_SHA}`

üì± Android APK (release): Download from assets below
üì¶ Android AAB (release): For Play Store deployment
üåê Web: Deployed to https://samaan-ai-production-2025.web.app

This release includes both web and Android builds.
RELEASE_EOF
        
    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          build/app/outputs/flutter-apk/app-production-release.apk
          build/app/outputs/flutter-apk/app-production-release.apk.sha256
          build/app/outputs/bundle/productionRelease/app-production-release.aab
          build/app/outputs/bundle/productionRelease/app-production-release.aab.sha256
        body_path: RELEASE_NOTES.md
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}